"""Add many-to-many relationship between rooms and equipment

Revision ID: d66b41a40a17
Revises: 577e3bfb952c
Create Date: 2024-11-19 17:17:46.168211

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "d66b41a40a17"
down_revision = "577e3bfb952c"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "room_equipment",
        sa.Column("room_id", sa.Integer(), nullable=False),
        sa.Column("equipment_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["equipment_id"],
            ["equipment.id"],
        ),
        sa.ForeignKeyConstraint(
            ["room_id"],
            ["room.id"],
        ),
        sa.PrimaryKeyConstraint("room_id", "equipment_id"),
    )
    with op.batch_alter_table("equipment", schema=None) as batch_op:
        batch_op.drop_index("ix_equipment_room_id")
        batch_op.drop_constraint("equipment_room_id_fkey", type_="foreignkey")
        batch_op.drop_column("room_id")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("equipment", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "room_id", sa.INTEGER(), autoincrement=False, nullable=False
            )
        )
        batch_op.create_foreign_key(
            "equipment_room_id_fkey", "room", ["room_id"], ["id"]
        )
        batch_op.create_index(
            "ix_equipment_room_id", ["room_id"], unique=False
        )

    op.drop_table("room_equipment")
    # ### end Alembic commands ###
